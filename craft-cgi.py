#!/usr/bin/python
#-*- coding: UTF8 -*-

#!/usr/pkgsrc/20140707/bin/python2.7
#!/usr/bin/python

# D. Gibbon, 2018-09-11

from __future__ import division

try:
	opsys = 'linux'
#	opsys = 'solaris'

	"""
# craft-cgi.py
# (formerly draft-cgi.py)
# D. Gibbon 2018-05-19
  254 craft-cgi.py
  254 modgdemodulation.py
  346 modggraphics.py
  151 modgpraat.py
  787 modgpyrapt.py
   73 modgrapt.py
  202 modgs0ftio.py
  383 modgs0ft.py
   24 nccfparams.py
   79 pyraptparams.py

f0new.praat	is a Praat script generated by modgpraat
pyraptparams.py is generated by modgpyrapt
nccfparams.py	is required by modgpyrapt
raptparams	is generated by modgrapt
	"""

#=================================================================
#=================================================================

	import warnings
	warnings.filterwarnings("ignore")

	import numpy as np
	import scipy.io.wavfile as wave

	import modgdemodulation as demod
	import modggraphics, modgs0ft,modgs0ftio

except:
	print "Module import error."; exit()

#=================================================================
try:
	modgs0ftio.inithtml()
except:
	print "HTML initialisation error."; exit()

#=================================================================
#=================================================================
# CGI input

try:
	cgifields = modgs0ftio.definecgifields()
	cgifielddict = modgs0ftio.cgitransferlines(cgifields)
	sharedparams, s0ftparams, displayparams = modgs0ftio.convertcgiparams(cgifielddict)

#=================================================================
# Adopt settings

	metadata, filebase, secstart, seclen, centreclip, wavmedianfilt, cutoffhi, orderhi, cutofflo, orderlo, algorithm, f0min, f0max, framerate, freqweight, polydegreeglobal, polydegreelocal, polydegreespectrum, f0switch = sharedparams

	fft, zerox, peaks, hilbertflag, f0medianfilt, voicetype = s0ftparams

	f0clipmin, f0clipmax, spectmin, spectmax, spectwinfactor, aemshzmin, aemshzmax, amdiffspectpower, fmdiffspectpower, figwidth, figheight = displayparams


except:
	print "CGI parameter input error."; exit()

#=================================================================
# Path names
try:
	if opsys == 'solaris':
		localdirectory = '../../docs/Webtmp/'
		webdirectory = '/gibbon/Webtmp/'
	elif opsys == 'linux':
		localdirectory = '/var/www/Webtmp/'
		webdirectory = '/Webtmp/'
	else:
		print 'Unknown operating system.'; exit()

	localdatadirectory = localdirectory + 'Data/'
	localtempdirectory = localdirectory

	localwavfile = localdatadirectory+"%s.wav"%filebase

	tempaudiofile = 'tempaudio.wav'
	localtempwavfile = localdirectory+tempaudiofile
	localwebwavfile = webdirectory+tempaudiofile

	localfigfile = localdirectory+"%s.png"%filebase
	webfigfile = webdirectory+"%s.png"%filebase

#========================================================================
# Filenames for selected stretch of signal

	localaudiobase = localdirectory+'tempaudio'+filebase+'_'+str(secstart)+'_'+str(seclen)
	localaudioclip = localdirectory+'tempaudio'+filebase+'_'+str(secstart)+'_'+str(seclen)+'.wav'
	webaudioclip = webdirectory+'tempaudio'+filebase+'_'+str(secstart)+'_'+str(seclen)+'.wav'

# Used for Praat module
	tempwavfilebase = 'tempaudio'
	tempwavfile = tempwavfilebase+'.wav'

except:
	print "Error defining directories and filenames."; exit()

#========================================================================
#======== Start of signal processing

#======== Read and check wav file

try:
	samprate,signal = wave.read(localwavfile)		# stereo file
	signal = np.array(signal)
except:
	print "Error:", localwavfile,"has wrong format or does not exist."
	exit()

try:
	if signal.shape[1] > 1:
		print '<b>Converting stereo to mono</b>. Selecting '+channel
		if channel=='both': print ' channels.'
		else: print 'channel.'
		if channel == 'left':
			signal = signal[:,0]
		elif channel == 'right':
			signal = signal[:,1]
		else:
			signal = signal[:,0] + signal[:,1]/2.0
except:
	"Do nothing."

#========================================================================
# Select signal
try:
	signalsamples = len(signal)
	signalduration = float(signalsamples)/float(samprate)

	selectstart = int(secstart * samprate)
	selectlen = int(seclen * samprate)

	if signalsamples < selectlen or selectlen < samprate or selectstart < 0 or 	selectlen < 0:
		print "Error: signal duration interval selection (%ss) is outside min or max permitted signal duration (1.0s, ..., %ss). Reset to max signal duration."%(str(selectstart+seclen),str(signalduration))
		selectstart = 0.0
		selectlen = signalsamples
		secstart = 0.0
		seclen = signalduration

	selectsignal = signal[selectstart:selectstart+selectlen]

# Write selected signal
	wave.write(localaudioclip,samprate,selectsignal)
	wave.write(tempwavfile,samprate,selectsignal)	# separate file for Praat
	
except:
	print "Error selecting or writing segment of signal."; exit()

#========================================================================
#========================================================================
# Signal processing: AM demodulation, amplitude envelope modulation spectra
try:
	rectifiedselectsignal, selectenvelope, frequenciessegment, magnitudessegment, amabsmagnitudediffs, amspectrumpolyline = demod.amdemodulation(selectsignal, samprate, aemshzmin, aemshzmax, wavmedianfilt, amdiffspectpower, polydegreespectrum)
except:
	print "Error during amplitude demodulation."; exit()

#========================================================================
# Signal processing: FM demodulation and spectrum

# Override input parameters with S0FT F0 shortcuts
if True:
#	freqweight = 0.02	# for RAPT
	stepfactor = 0.01

	if algorithm == 'S0FT':
		f0min, f0max, cutoffhi, orderhi, cutofflo,  orderlo, f0clipmin, f0clipmax, centreclip = modgs0ft.s0ftf0shortcutoverrides(voicetype)

	f0list = demod.fmdemodulation(tempwavfilebase, selectsignal, samprate, algorithm, fft, zerox, peaks, polydegreeglobal, framerate, stepfactor, f0medianfilt, f0min, f0max, centreclip, f0clipmin, f0clipmax, cutoffhi, orderhi, cutofflo, orderlo)

	localpolyline, globalpolyline, f0median, f0medianised, f0zeroed = demod.f0polylines(f0list, f0min, f0max, polydegreelocal, polydegreeglobal)

	f0frequenciessegment, f0magnitudessegment, fmabsmagnitudediffs, fmspectrumpolyline = demod.fmspectrum(f0medianised, secstart, seclen, framerate, aemshzmin, aemshzmax, fmdiffspectpower, polydegreespectrum)

if False:
	print "Error during frequency demodulation, modelling or FEMS analysis."; exit()

#===================================================================
#===================================================================
# Display

try:
	spectwin = int(float(65536*spectwinfactor))

	selectionparams = algorithm #, waveform, spectro, f0track, amspect, fmspect

	figureparams = figwidth, figheight, localfigfile

	signalparams = filebase, selectsignal, samprate, rectifiedselectsignal, selectenvelope, samprate, secstart, seclen

	spectrumparams = spectmin, spectmax, spectwin

	f0params = f0list, framerate, secstart, seclen, f0min, f0max, f0switch, localpolyline, globalpolyline

	aemsparams = frequenciessegment, magnitudessegment, amspectrumpolyline, aemshzmin, aemshzmax, f0frequenciessegment, amabsmagnitudediffs

	femsparams = f0frequenciessegment, f0magnitudessegment, fmspectrumpolyline, fmabsmagnitudediffs

except:
	print "Error during display parameter collation."; exit()

#===================================================================

try:
	modggraphics.callgraphics(selectionparams, figureparams,signalparams, spectrumparams, f0params, aemsparams, femsparams)
except:
	print "Display error."; exit()

#===================================================================

try:
	modgs0ftio.htmloutput(webaudioclip, webfigfile, filebase, samprate, signalduration, signalsamples, secstart, seclen, framerate)
except:
	print "HTML output error."; exit()

#===================================================================
#===== Correlations - move this later to a module 'modgresults.py'

# Collect for comparison:
# 1. Raw F0 curve
# 2. Squashed F0 curve (i.e. without data outside limit, to get median)
# 3. medianised F0 curve (i.e. with data outside limits replaced by median)
# 4. AEMS
# 5. FEMS
# 6. AEMSdiff
# 7. FEMSdiff
# Correlations:
# 1. Amplitude:Frequency modulation
# 2. AEMS:FEMS

def correlations(envelope, f0list, globalpolyline, aemsfreq, aemsmag, femsfreq, femsmag, samplerate, framerate):
	
	envf0ratio = (1.0*len(envelope)) / (1.0*len(f0list))
	envreduced = envelope[::envf0ratio]

	envpolyline = demod.polyregline(range(len(envelope)), envelope,polydegreeglobal)
	envpolylinereduced = envpolyline[::envf0ratio]

	f0median, f0medianised, f0zeroed = demod.zeroandmedianise(f0list,f0min,f0max)

	minlen = np.min([len(envreduced),len(f0medianised),len(globalpolyline),len(envpolylinereduced)])
	envreduced = envreduced[:minlen]
	f0medianised = f0medianised[:minlen]
	envpolylinereduced = envpolylinereduced[:minlen]
	f0 = f0list[:minlen]
	f0poly = globalpolyline[:minlen]
	
	minlen = np.min([len(aemsmag),len(femsmag)])
	aemsmag = aemsmag[:minlen]
	femsmag = femsmag[:minlen]
	print len(aemsmag),len(femsmag)

	correnvf0 = np.corrcoef(envreduced,f0)[0][1]
	correnvf0med = np.corrcoef(envreduced,f0medianised)[0][1]
	correnvpoly = np.corrcoef(envpolylinereduced,f0poly)[0][1]
	corraemsfems = np.corrcoef(aemsmag,femsmag)[0][1]

# Also do a correlation between polynomial models at different orders
# for both env:f0 and aems:fems

	return f0median, correnvf0, correnvf0med, correnvpoly, corraemsfems

# Work in progress
# envf0forr, aemsfemscorr = correlations(selectenvelope, f0list, frequenciessegment, magnitudessegment, f0frequenciessegment, f0magnitudessegment, samprate, framerate)
f0median, correnvf0, correnvf0med, correnvpoly, corraemsfems = correlations(selectenvelope, f0list, globalpolyline, frequenciessegment, magnitudessegment, f0frequenciessegment, f0magnitudessegment, samprate, framerate)

print "<table>"
print "<tr><td><b>Median:</b></td><td>",f0median,"</td></tr>"
print "<tr><td><b>Correlation env:F0</b> =</td><td>",correnvf0,"</td></tr>"
print "<tr><td><b>Correlation env:F0med</b> =</td><td>",correnvf0med,"</td></tr>"
print "<tr><td><b>Correlation env:poly</b> =</td><td>",correnvpoly," (degree =",polydegreeglobal,"; TaaG, Trend at a Glance)</td></tr>"
print "<tr><td><b>Correlation aems:fems</b> =</td><td>",corraemsfems,"</td></tr>"
print "</table>"

#===================================================================
#===================================================================
try:
	modgs0ftio.terminatehtml()
except:
	print "HTML termination error."; exit()

#===================================================================
